
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.3.1'
    }
}


plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'com.paipeng'
version '1.0.0'

sourceCompatibility = '17'
targetCompatibility = '17'


javadoc {
    options.addStringOption('encoding', 'UTF-8')
}
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.22'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}


javafx {
    // Points to JDK and its JavaFX libraries, also declares target runtime JDK
//    javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk'

    version = '17' // Specify javafx sdk version
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.media', 'javafx.graphics']

}

application {
    mainModule = 'com.paipeng'
    mainClass = 'com.paipeng.JavaFXApp'
}


test {
    useJUnitPlatform()
}


// 2. Add tasks

// 2.1 Clean buildDir before running proguard
task cleanClasses(type: Delete) {
    delete "${buildDir}/classes/java/main"
    delete "${buildDir}/resources/java/main"
}

classes.dependsOn(cleanClasses)



def fatJarInputFile = 'build/libs/JavaFXApp-' + project.version.toString() + '.jar'
def proguardOutputFile = 'out/obfuscated/JavaFXApp-' + project.version.toString() + '.jar'

// for more details, see: http://proguard.sourceforge.net/manual/gradle.html
task proguard(type: proguard.gradle.ProGuardTask) {

    // make all runtime-dependencies available while obfruscating
    //configurations.runtime.resolve().each {
    //    libraryjars file(it.getAbsolutePath())
    //}

    //injars project.sourceSets.main.output
    println fatJarInputFile
    injars fatJarInputFile
    println proguardOutputFile
    outjars proguardOutputFile

    //libraryjars project.sourceSets.main.compileClasspath

    // Automatically handle the Java version of this build.
    println System.getProperty('java.version')
    if (System.getProperty('java.version').startsWith('1.')) {
        println "java before 9"
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        println "java after 9"
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }

    configuration 'proguard.prog'
    //configuration 'proguard.pro'

}

// 2.3 Clean after proguard task
task cleanAfterProguard(type: Delete, dependsOn: proguard) {
    delete "${buildDir}/classes/java/main"
    delete "${buildDir}/resources/java/main"
}

// 2.4 Extract output jar to buildDir
task unpackProguardOutput (type: Copy, dependsOn: cleanAfterProguard) {
    from zipTree("${buildDir}/proguard/output.jar")
    into file("${buildDir}/classes/java/main")
}