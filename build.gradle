
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
    }
}


plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'com.paipeng'
version '1.0.0'

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.22'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}


javafx {
    // Points to JDK and its JavaFX libraries, also declares target runtime JDK
//    javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk'

    version = '17' // Specify javafx sdk version
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.media', 'javafx.graphics']

}

application {
    mainModule = 'com.paipeng'
    mainClass = 'com.paipeng.JavaFXApp'
}

task ('proguard', type: proguard.gradle.ProGuardTask) {

    // You should probably import a more compact ProGuard-style configuration
    // file for all static settings, but we're specifying them all here, for
    // the sake of the example.
    //configuration 'configuration.pro'

    verbose

    // Specify the input jars, output jars, and library jars.
    // We'll filter out the Ant classes, Gradle classes, and WTK classes, keeping
    // everything else.

    //injars  '../../lib/proguard.jar', filter: '!proguard/ant/**,!proguard/gradle/**,!proguard/wtk/**'
    //outjars 'proguard_out.jar'

    injars './build/libs/JavaFXApp-all-1.0-SNAPSHOT.jar'

    outjars './out/obfuscated/Obfuscated.jar'

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
        libraryjars "${System.getProperty('java.home')}/lib/javaws.jar"
        libraryjars "${System.getProperty('java.home')}/lib/ext/jfxrt.jar"
        libraryjars "./lib/fontbox-2.0.19.jar"
        libraryjars "./lib/pdfbox-2.0.19.jar"
        libraryjars "./lib/pdfbox-tools-2.0.19.jar"
        libraryjars "./lib/pdfbox-tools-2.0.19.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }

    // Write out an obfuscation mapping file, for de-obfuscating any stack traces
    // later on, or for incremental obfuscation of extensions.

    printmapping './out/obfuscated/proguard.map'

    // Don't print notes about reflection in injected code.

    dontshrink
    dontnote 'proguard.configuration.ConfigurationLogger'




    // Preserve injected GSON utility classes and their members.

    keep allowobfuscation: true, 'class proguard.optimize.gson._*'


    keep 'class org.apache.**, com.fasterxml.**, com.twelvemonkeys.**, org.krysalis.barcode4j.**, com.sun.jna.**, org.w3.**, org.openxmlformats.**, org.etsi.**, com.microsoft.**'

    keepclassmembers 'class proguard.optimize.gson._* { \
        *; \
    }'

    //keepattributes 'javafx.fxml.FXML,Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod'

    keepattributes 'javafx.fxml.FXML,Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod'
    keepclassmembers 'class * {\
    @javafx.fxml.FXML *;\
    }'

    // Obfuscate class strings of injected GSON utility classes.

    adaptclassstrings 'proguard.optimize.gson.**'

    // Allow methods with the same signature, except for the return type,
    // to get the same obfuscation name.

    overloadaggressively

    // Put all obfuscated classes into the nameless root package.

    repackageclasses ''

    // Allow classes and class members to be made public.

    allowaccessmodification

    // The entry point: ProGuard and its main method.

    keep 'public class proguard.ProGuard { \
        public static void main(java.lang.String[]); \
    }'
    keep 'public class com.paipeng.JavaFXApp'

    // If you want to preserve the Ant task as well, you'll have to specify the
    // main ant.jar.

    //libraryjars '/usr/local/java/ant/lib/ant.jar'
    //adaptresourcefilecontents 'proguard/ant/task.properties'
    //
    //keep allowobfuscation: true, 'class proguard.ant.*'
    //keepclassmembers 'public class proguard.ant.* { \
    //    <init>(org.apache.tools.ant.Project); \
    //    public void set*(***); \
    //    public void add*(***); \
    //}'

    // If you want to preserve the Gradle task, you'll have to specify the Gradle
    // jars.

    //libraryjars '/usr/local/java/gradle-4.2.1/lib/plugins/gradle-plugins-4.2.1.jar'
    //libraryjars '/usr/local/java/gradle-4.2.1/lib/gradle-base-services-4.2.1.jar'
    //libraryjars '/usr/local/java/gradle-4.2.1/lib/gradle-core-4.2.1.jar'
    //libraryjars '/usr/local/java/gradle-4.2.1/lib/groovy-all-2.4.12.jar'

    //keep 'public class proguard.gradle.* { \
    //    public *; \
    //}'

    // If you want to preserve the WTK obfuscation plug-in, you'll have to specify
    // the kenv.zip file.

    //libraryjars '/usr/local/java/wtk2.5.2/wtklib/kenv.zip'
    //keep 'public class proguard.wtk.ProGuardObfuscator'


    dontoptimize

    // Save meta-data for stack traces
    renamesourcefileattribute 'SourceFile'
    keepattributes 'SourceFile,LineNumberTable'

    // Rename FXML files together with related views
    adaptresourcefilenames '**.fxml,**.png,**.css'
    adaptresourcefilecontents '**.fxml'
    adaptclassstrings

    // Keep all annotations and meta-data
    keepattributes '*Annotation*,Signature,EnclosingMethod'

    //# Keep entry-point class
    keep 'class com.paipeng.JavaFXApp {\
        public static void main(java.lang.String[]);\
    }'



    //# Keep names of fields marked with @FXML attribute
    keepclassmembers 'class * {\
        @javafx.fxml.FXML *;\
    }'
}

test {
    useJUnitPlatform()
}