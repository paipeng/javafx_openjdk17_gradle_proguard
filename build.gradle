
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.3.1'
    }
}


plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.runtime' version '1.13.0'
}

group 'com.paipeng'
version '1.0.0'

sourceCompatibility = '17'
targetCompatibility = '17'


javadoc {
    options.addStringOption('encoding', 'UTF-8')
}
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.22'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}


javafx {
    // Points to JDK and its JavaFX libraries, also declares target runtime JDK
//    javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk'

    version = '17' // Specify javafx sdk version
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.media', 'javafx.graphics']

}

application {
    mainModule = 'com.paipeng'
    mainClass = 'com.paipeng.JavaFXApp'
}


test {
    useJUnitPlatform()
}


// 2. Add tasks

// 2.1 Clean buildDir before running proguard
task cleanClasses(type: Delete) {
    delete "${buildDir}/classes/java/main"
    delete "${buildDir}/resources/java/main"
}

classes.dependsOn(cleanClasses)



def fatJarInputFile = 'build/libs/JavaFXApp-' + project.version.toString() + '.jar'
def proguardOutputFile = 'out/obfuscated/JavaFXApp-' + project.version.toString() + '.jar'

// for more details, see: http://proguard.sourceforge.net/manual/gradle.html
task proguard(type: proguard.gradle.ProGuardTask, dependsOn: jar) {

    // make all runtime-dependencies available while obfruscating
    //configurations.runtime.resolve().each {
    //    libraryjars file(it.getAbsolutePath())
    //}

    //injars project.sourceSets.main.output
    println fatJarInputFile
    injars fatJarInputFile
    println proguardOutputFile
    outjars proguardOutputFile

    //libraryjars project.sourceSets.main.compileClasspath

    // Automatically handle the Java version of this build.
    println System.getProperty('java.version')
    if (System.getProperty('java.version').startsWith('1.')) {
        println "java before 9"
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        println "java after 9"
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }

    configuration 'proguard.prog'
    //configuration 'proguard.pro'

    doLast {
        println 'proguard doLast'
        delete("$fatJarInputFile")

        copy {
            from("$proguardOutputFile")
            into("${project.buildDir.absolutePath}/libs/")
        }
    }
}

// 2.3 Clean after proguard task
task cleanAfterProguard(type: Delete, dependsOn: proguard) {
    delete "${buildDir}/classes/java/main"
    delete "${buildDir}/resources/java/main"
}

// 2.4 Extract output jar to buildDir
task unpackProguardOutput (type: Copy, dependsOn: cleanAfterProguard) {
    from zipTree("${buildDir}/proguard/output.jar")
    into file("${buildDir}/classes/java/main")
}
/*
jar {
    dependsOn 'cleanAfterProguard'
    manifest {
        attributes(
                'Main-Class': 'com.paipeng.JavaFXApp'
        )
    }
    from zipTree("${buildDir}/proguard/output.jar")
}

 */

application {
    mainClass = 'com.paipeng.JavaFXApp'
}

run {
    //jvmArgs = ['-Djdk.gtk.version=2']
    jvmArgs = ['-Djdk.gtk.version=2', '--add-exports', 'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
               '--add-exports', 'javafx.graphics/com.sun.javafx.font=ALL-UNNAMED']
}
description = "The Application is for printing serialized labels or idcard."

// Runtime for non-modular projects
runtime {
    // Some default options
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    // '--add-exports javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED', '--add-exports javafx.graphics/com.sun.javafx.font=ALL-UNNAMED'
    // The modules !
    modules = ['javafx.media', 'javafx.base', 'javafx.swing', 'javafx.controls', 'javafx.graphics',
               'javafx.fxml', 'java.sql'
    ]
    launcher{
        noConsole = false
    }
    // Pack it!
    jpackage {
        // Could be taken from command line, here it is defined statically
        // project.findProperty('installerOs')
        //    (example: -PinstallerOs=mac)
        targetPlatformName = 'mac'
        // The app name
        imageName = 'IdLabelPrinting'
        jvmArgs = ['-Djdk.gtk.version=2', '--add-exports', 'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
                   '--add-exports', 'javafx.graphics/com.sun.javafx.font=ALL-UNNAMED',
                   '--add-modules=javafx.controls,javafx.swing,javafx.media,javafx.graphics,javafx.fxml'
        ]
        // Resource directory for native package overrides,
        // you can do lots of magic here too...
        resourceDir = file('package/')
        if (targetPlatformName == 'mac') {
            targetPlatform("mac") {
                // Use downloaded Bellsoft Liberica JDK with JavaFX bundled!
                //jdkHome = '/Users/paipeng/Library/Java/JavaVirtualMachines/openjdk-17/Contents/Home'
                jdkHome = '/opt/jdk-17.0.6.jdk'

                // We also could directly download a JDK
                //jdkHome = jdkDownload("https://download.java.net/java/GA/jdk17.0.1/2a2082e5a09d4267845be086888add4f/12/GPL/openjdk-17.0.1_macos-x64_bin.tar.gz")
            }
            installerType = 'pkg'
        }
        if (targetPlatformName == 'win') {
            targetPlatform("win") {
                jdkHome = 'E:/jdk-17.0.6'
            }
            installerType = 'exe'
        }
        if (targetPlatformName == 'linux') {
            targetPlatform("linux") {
            }
            installerType = 'deb'
        }
        // Add jpackage-specific options
        installerOptions = [
                '--name', 'JavaFXApp', // installer name
                '--description', project.description,
                '--copyright', 'Copyright 2023 PaiPeng',
                '--vendor', 'PaiPeng'
        ]
        // We also could take the installer type from comand line
        // installerType = project.findProperty('installerType')
        // We would pass this from the command line
        //    (example: -PinstallerType=msi)
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/resources/icon.icns']
            installerOptions += [
                    '--license-file', 'package/LICENSE-OS-Installer.txt'
            ]
        }
        if (installerType == 'exe') {
            imageOptions += ['--icon', 'src/main/resources/idcard-logo.ico']
            installerOptions += [
                    '--win-per-user-install', // Install only for current user
                    '--win-console', // Shows what Java outputs to the console
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut'
            ]
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/resources/images/icon.png']
            installerOptions += [
                    '--linux-menu-group', 'Utility',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'sipaipv6@gmail.com'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'GPLv3'
            ]
        }
    }
}
task copyJar(type: Copy) {
    from proguardOutputFile
    //into 'build/install/JavaFXApp/lib'
    into 'build/libs'
}

/**
 * Hook for obfuscating. Configures installDist to
 * depend on obfuscate.
 */

tasks.installDist {
    dependsOn("proguard")
    //dependsOn("copyJar")
    //proguard.finalizedBy copyJar
}

jpackage {

    // Could be used for pre-checks;
    // e.g., are certain command line arguments defined?
    doFirst {
        // project.findProperty('installerOs')
        //    (example: -PinstallerOs=mac)
        // project.getProperty('installerType') // throws exception if its missing
    }
}